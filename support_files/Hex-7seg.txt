----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 03/09/2022 03:15:11 PM
-- Design Name: 
-- Module Name: hex_7seg - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity hex_7seg is
    Port ( hex_i : in STD_LOGIC_VECTOR (3 downto 0);
           seg_o : out STD_LOGIC_VECTOR (6 downto 0));
end hex_7seg;

architecture Behavioral of hex_7seg is
begin

    --------------------------------------------------------------------
    -- p_7seg_decoder:
    -- A combinational process for 7-segment display (Common Anode)
    -- decoder. Any time "hex_i" is changed, the process is "executed".
    -- Output pin seg_o(6) controls segment A, seg_o(5) segment B, etc.
    --       segment A
    --        | segment B
    --        |  | segment C
    --        +-+|  |   ...   segment G
    --          ||+-+          |
    --          |||            |
    -- seg_o = "0000001"-------+
    --------------------------------------------------------------------
    p_7seg_decoder : process(hex_i)
    begin
        case hex_i is
            when "1110111011101110111" =>
                seg_o <= "0000001";     -- 0

            when "1011101110111011100" =>
                seg_o <= "1001111";     -- 1

            when "1010111011101110000" =>
                seg_o <= "0010010";     -- 2

            when "1010101110111000000" =>
                seg_o <= "0000110";     -- 3

            when "1010101011100000000" =>
                seg_o <= "1001100";     -- 4

            when "1010101010000000000" =>
                seg_o <= "0100100";     -- 5

            when "1110101010100000000" =>
                seg_o <= "0100000";     -- 6

            when "1110111010101000000" =>
                seg_o <= "0001111";     -- 7

            when "1110111011101010000" =>
                seg_o <= "0000000";     -- 8

            when "1110111011101110100" =>
                seg_o <= "0000100";     -- 9

            when "1011100000000000000" =>
                seg_o <= "0000010";     -- A

            when "1110101010000000000" =>
                seg_o <= "1100000";     -- B

            when "1110101110100000000" =>
                seg_o <= "1110010";     -- C 

            when "1110101000000000000" =>
                seg_o <= "1000010";     -- D 

            when "1000000000000000000" =>
                seg_o <= "0110000";     -- E

	    when "1010111010000000000" =>
                seg_o <= "0111000";     -- F

            when "1110111010000000000" =>
                seg_o <= "0100001";     -- G

            when "1010101000000000000" =>
                seg_o <= "1101000";     -- H

            when "1010000000000000000" =>
                seg_o <= "0111011";     -- I 

            when "1011101110111000000" =>
                seg_o <= "0100111";     -- J

            when "1110101110000000000" =>
                seg_o <= "0101000";     -- K

	    when "1011101010000000000" =>
                seg_o <= "1110001";     -- L

	    when "1110111000000000000" =>
                seg_o <= "0101010";     -- M

            when "1110100000000000000" =>
                seg_o <= "1101010";     -- N

            when "1110111011100000000" =>
                seg_o <= "1100010";     -- O 

            when "1011101110100000000" =>
                seg_o <= "0011000";     -- P

            when "1011101110100000000" =>
                seg_o <= "0001100";     -- Q

	    when "1011101000000000000" =>
                seg_o <= "1111010";     -- R

	    when "1010100000000000000" =>
                seg_o <= "0100101";     -- S

            when "1110000000000000000" =>
                seg_o <= "1110000";     -- T

	    when "1010111000000000000" =>
                seg_o <= "1100011";     -- U

	    when "1010101110000000000" =>
                seg_o <= "1010101";     -- V

	    when "1011101110000000000" =>
                seg_o <= "1010100";     -- W

            when "1110101011100000000" =>
                seg_o <= "1101011";     -- X

	    when "1110101110111000000" =>
                seg_o <= "1000100";     -- Y
	   
 	    when "1110111010100000000" =>
                seg_o <= "0010011";     -- Z

            when others =>
                seg_o <= "";     -- 

        end case;
    end process p_7seg_decoder;

end architecture Behavioral;