
----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 26.04.2022 20:16:08
-- Design Name: 
-- Module Name: morse_to_8bit_shifter - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity morse_to_8bit_shifter2 is
    Port ( dot_i : in STD_LOGIC;
           dash_i : in STD_LOGIC;
           en1_i : in STD_LOGIC;
           char_i : in STD_LOGIC;
           word_i : in STD_LOGIC;
           en2_i : in STD_LOGIC;
           rst : in STD_logic;
           clk : in STD_logic;
           data_o : out STD_LOGIC_VECTOR (8 - 1 downto 0);
           rdy_o : out STD_LOGIC);
end morse_to_8bit_shifter2;

architecture Behavioral of morse_to_8bit_shifter2 is

signal s_data_int : std_logic_vector (8 - 1 downto 0);
signal s_status : std_logic;

begin
    shift_register:process (clk)
        begin
            if rising_edge (clk) then
                if (rst = '1') then             -- synchronous reset
                    s_data_int <= "00000001";
                    data_o <= "10000000";
                    rdy_o <= '0';
                    s_status <= '0';
                else
                    if (en1_i = '1' and en2_i = '0') then                       -- if dot or dash is detected 
                        s_status <= '1';                                        -- s_status is set to '1'
                                                                                -- that allows the next output sequence to happen
                        if dot_i = '1' then                                     -- register is filled according to the detected sequence of morse code
                            s_data_int <= s_data_int(6 downto 0) & '0';
                        elsif dash_i = '1' then
                            s_data_int <= s_data_int(6 downto 0) & '1';                
                        end if;
                    elsif (en1_i = '0' and en2_i = '1' and s_status = '1') then -- if s_status has been set and a space is detected in the morse code
                                                                                -- register content is sent to the output and ready signal is activated
                                                                                -- so that the memory which receives the output can load it
                            data_o <= s_data_int;
                            rdy_o <= '1';
                            s_status <= '0';                                    -- s_status is immediately set to low, which makes sure, that
                                                                                -- ready signal is only a brief impulse so that the memory
                                                                                -- which receives the output doesn't load it multiple times in a row
                                                                                -- but only once
                    elsif(s_status = '0') then
                        s_data_int <= "00000001";                               --ready signal is set to low and the register is reseted as quickly as possible
                        rdy_o <= '0';                          
                    end if;
                end if;
            end if;    
        end process;
end architecture Behavioral;
